// Code generated by protoc-gen-go. DO NOT EDIT.
// source: imagexample.proto

/*
Package imagexample is a generated protocol buffer package.

It is generated from these files:
	imagexample.proto

It has these top-level messages:
	ImageRequest
	ImageResponse
*/
package imagexample

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ImageRequest struct {
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
}

func (m *ImageRequest) Reset()                    { *m = ImageRequest{} }
func (m *ImageRequest) String() string            { return proto.CompactTextString(m) }
func (*ImageRequest) ProtoMessage()               {}
func (*ImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ImageRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type ImageResponse struct {
	Captcha  string `protobuf:"bytes,1,opt,name=captcha" json:"captcha,omitempty"`
	Language string `protobuf:"bytes,2,opt,name=language" json:"language,omitempty"`
}

func (m *ImageResponse) Reset()                    { *m = ImageResponse{} }
func (m *ImageResponse) String() string            { return proto.CompactTextString(m) }
func (*ImageResponse) ProtoMessage()               {}
func (*ImageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ImageResponse) GetCaptcha() string {
	if m != nil {
		return m.Captcha
	}
	return ""
}

func (m *ImageResponse) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func init() {
	proto.RegisterType((*ImageRequest)(nil), "imagexample.ImageRequest")
	proto.RegisterType((*ImageResponse)(nil), "imagexample.ImageResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ImageCaptchaService service

type ImageCaptchaServiceClient interface {
	ResolveCaptcha(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*ImageResponse, error)
}

type imageCaptchaServiceClient struct {
	cc *grpc.ClientConn
}

func NewImageCaptchaServiceClient(cc *grpc.ClientConn) ImageCaptchaServiceClient {
	return &imageCaptchaServiceClient{cc}
}

func (c *imageCaptchaServiceClient) ResolveCaptcha(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*ImageResponse, error) {
	out := new(ImageResponse)
	err := grpc.Invoke(ctx, "/imagexample.ImageCaptchaService/ResolveCaptcha", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ImageCaptchaService service

type ImageCaptchaServiceServer interface {
	ResolveCaptcha(context.Context, *ImageRequest) (*ImageResponse, error)
}

func RegisterImageCaptchaServiceServer(s *grpc.Server, srv ImageCaptchaServiceServer) {
	s.RegisterService(&_ImageCaptchaService_serviceDesc, srv)
}

func _ImageCaptchaService_ResolveCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageCaptchaServiceServer).ResolveCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imagexample.ImageCaptchaService/ResolveCaptcha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageCaptchaServiceServer).ResolveCaptcha(ctx, req.(*ImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImageCaptchaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "imagexample.ImageCaptchaService",
	HandlerType: (*ImageCaptchaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResolveCaptcha",
			Handler:    _ImageCaptchaService_ResolveCaptcha_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "imagexample.proto",
}

func init() { proto.RegisterFile("imagexample.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcc, 0xcc, 0x4d, 0x4c,
	0x4f, 0xad, 0x48, 0xcc, 0x2d, 0xc8, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x46,
	0x12, 0x52, 0x52, 0xe0, 0xe2, 0xf1, 0x04, 0x71, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84,
	0x04, 0xb8, 0x98, 0x4b, 0x8b, 0x72, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x40, 0x4c, 0x25,
	0x57, 0x2e, 0x5e, 0xa8, 0x8a, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x09, 0x2e, 0xf6, 0xe4,
	0xc4, 0x82, 0x92, 0xe4, 0x8c, 0x44, 0xa8, 0x32, 0x18, 0x57, 0x48, 0x8a, 0x8b, 0x23, 0x27, 0x31,
	0x2f, 0xbd, 0x34, 0x31, 0x3d, 0x55, 0x82, 0x09, 0x2c, 0x05, 0xe7, 0x1b, 0x25, 0x70, 0x09, 0x83,
	0x8d, 0x71, 0x86, 0xa8, 0x0d, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x15, 0xf2, 0xe4, 0xe2, 0x0b,
	0x4a, 0x2d, 0xce, 0xcf, 0x29, 0x83, 0x49, 0x08, 0x49, 0xea, 0x21, 0x3b, 0x19, 0xd9, 0x71, 0x52,
	0x52, 0xd8, 0xa4, 0x20, 0xae, 0x52, 0x62, 0x48, 0x62, 0x03, 0x7b, 0xcf, 0x18, 0x10, 0x00, 0x00,
	0xff, 0xff, 0x49, 0xda, 0x15, 0x37, 0xf3, 0x00, 0x00, 0x00,
}
